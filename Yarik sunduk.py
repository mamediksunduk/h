from typing import Dict, Any, Optional, List, Union
from dataclasses import dataclass
import logging
from vkbottle import Bot, User, GroupEventType
from vkbottle.bot import BotLabeler

@dataclass
class ConfigType:
    BOT_TOKEN: str
    USER_TOKEN: str
    GROUP_ID: int
    SPECIAL_CHAT_ID: int
    LOG_LEVEL: int = logging.DEBUG

@dataclass
class UserInfo:
    id: int
    first_name: str
    last_name: str

class VKError(Exception):
    pass

CONFIG: ConfigType = ConfigType(
    BOT_TOKEN='',
    USER_TOKEN='',
    GROUP_ID=0,
    SPECIAL_CHAT_ID=0
)

logging.basicConfig(
    level=CONFIG.LOG_LEVEL,
    format='%(asctime)s | %(levelname)s | %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

bot = Bot(token=CONFIG.BOT_TOKEN)
user = User(token=CONFIG.USER_TOKEN)
labeler = BotLabeler()

class VKHelper:
    @staticmethod
    async def fetch_user_info(user_id: int) -> Optional[UserInfo]:
        try:
            logger.debug(f"–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ID: {user_id}")
            user_info = await bot.api.users.get(user_ids=user_id)

            if not user_info:
                return None

            user_data = user_info[0]
            return UserInfo(
                id=user_data.id, 
                first_name=user_data.first_name, 
                last_name=user_data.last_name
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
            return None

    @staticmethod
    async def get_post_author(owner_id: int, post_id: int) -> int:
        try:
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ –ø–æ—Å—Ç–∞: owner_id={owner_id}, post_id={post_id}")

            posts = await user.api.wall.get(
                owner_id=owner_id,
                filter='all',
                count=1,
                item_ids=[post_id],
                extended=1
            )

            if not posts or not posts.items:
                logger.warning(f"–ü–æ—Å—Ç {owner_id}_{post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return owner_id

            post = posts.items[0]
            logger.info(f"–ê—Ç—Ä–∏–±—É—Ç—ã –ø–æ—Å—Ç–∞: {vars(post)}")

            author_candidates: List[Optional[int]] = [
                getattr(post, 'created_by', None),
                getattr(post, 'signer_id', None),
                abs(getattr(post, 'from_id', 0)),
                abs(getattr(post, 'owner_id', 0)),
                abs(owner_id)
            ]

            author_candidates = [
                a for a in author_candidates 
                if a and a != 0
            ]

            if author_candidates:
                logger.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ –∞–≤—Ç–æ—Ä—Å—Ç–≤–æ: {author_candidates}")
                return author_candidates[0]

            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ –ø–æ—Å—Ç–∞ {owner_id}_{post_id}")
            return owner_id

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∞ –ø–æ—Å—Ç–∞ {owner_id}_{post_id}: {e}", exc_info=True)
            return owner_id
class NotificationService:
    @staticmethod
    async def send_special_chat(
        message: str, 
        payload: Optional[Dict[str, Union[str, int]]] = None
    ) -> None:
        try:
            if len(message) > 4096:
                message = message[:4096] + "... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"

            await bot.api.messages.send(
                peer_id=CONFIG.SPECIAL_CHAT_ID, 
                message=message, 
                payload=payload or {}, 
                random_id=0
            )
            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

class EventHandlers:
    @labeler.raw_event(GroupEventType.WALL_POST_NEW)
    async def handle_wall_post(event: Dict[str, Any]) -> None:
        try:
            if not isinstance(event.get('object', {}), dict):
                logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–±—ã—Ç–∏—è")
                return

            post_id: Optional[int] = event['object'].get('id')
            owner_id: Optional[int] = event['object'].get('owner_id')

            if not post_id or not owner_id:
                logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: post_id={post_id}, owner_id={owner_id}")
                return

            post_type: str = event['object'].get('post_type', 'default')
            from_id: Optional[int] = event['object'].get('from_id')
            created_by: int = event['object'].get('created_by', from_id or owner_id)

            admin = await VKHelper.fetch_user_info(created_by)
            if not admin:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {created_by}")
                return

            message: str = (
                f"üîî –ù–æ–≤—ã–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ—Å—Ç! ü§î\n"
                f"üìú ID –∑–∞–ø–∏—Å–∏: {post_id}\n"
                f"üë§ –ü—Ä–µ–¥–ª–æ–∂–∏–ª: {admin.first_name} {admin.last_name}\n"
                f"üîó –°—Å—ã–ª–∫–∞: https://vk.com/wall{owner_id}_{post_id}"
            ) if post_type == 'suggest' else (
                f"üîî –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ —Å—Ç–µ–Ω–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞! üîî\n"
                f"üìú ID –∑–∞–ø–∏—Å–∏: {post_id}\n"
                f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin.first_name} {admin.last_name}\n"
                f"üîó –°—Å—ã–ª–∫–∞: https://vk.com/wall{owner_id}_{post_id}"
            )

            payload_type = "suggested_post" if post_type == 'suggest' else "new_wall_post"

            await NotificationService.send_special_chat(
                message, 
                {
                    'type': "post", 
                    'key': payload_type,
                    'post_id': post_id,
                    'owner_id': owner_id
                }
            )

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏: {e}", exc_info=True)

    @labeler.raw_event(GroupEventType.LIKE_ADD)
    async def handle_like(event: Dict[str, Any]) -> None:
        try:
            owner_id: int = event['object']['object_owner_id']
            post_id: int = event['object']['object_id']
            liker_id: int = event['object']['liker_id']

            liker = await VKHelper.fetch_user_info(liker_id)
            if not liker:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {liker_id}")
                return

            post_author_id = await VKHelper.get_post_author(owner_id, post_id)

            message_parts: List[str] = [
                "‚ù§Ô∏è –ù–æ–≤—ã–π –õ–∞–π–∫! üíï",
                f"üìú –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏:",
                f"üÜî ID –ó–∞–ø–∏—Å–∏: {post_id}",
                f"üë§ –õ–∞–π–∫–Ω—É–ª: {liker.first_name} {liker.last_name} (ID: {liker.id})"
            ]

            if post_author_id:
                post_author = await VKHelper.fetch_user_info(post_author_id)
                if post_author:
                    message_parts.append(
                        f"üñã –ê–≤—Ç–æ—Ä –∑–∞–ø–∏—Å–∏: {post_author.first_name} {post_author.last_name} "
                        f"(ID: {post_author.id})"
                    )
                else:
                    message_parts.append("üñã –ê–≤—Ç–æ—Ä –∑–∞–ø–∏—Å–∏: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å")
            else:
                message_parts.append("üñã –ê–≤—Ç–æ—Ä –∑–∞–ø–∏—Å–∏: –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")

            message_parts.append(f"üîó –°—Å—ã–ª–∫–∞: https://vk.com/wall{owner_id}_{post_id}")

            message = "\n".join(message_parts)
            await NotificationService.send_special_chat(
                message, 
                {
                    'type': "like", 
                    'key': "new_like",
                    'post_id': post_id,
                    'liker_id': liker_id
                }
            )

        except Exception as e:            
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∞–π–∫–∞: {e}", exc_info=True)

    @labeler.raw_event(GroupEventType.LIKE_REMOVE)
    async def handle_like_remove(event: Dict[str, Any]) -> None:
        try:
            owner_id: int = event['object']['object_owner_id']
            post_id: int = event['object']['object_id']
            liker_id: int = event['object']['liker_id']

            liker = await VKHelper.fetch_user_info(liker_id)
            if not liker:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {liker_id}")
                return

            post_author_id = await VKHelper.get_post_author(owner_id, post_id)

            message_parts: List[str] = [
                "‚ùå –õ–∞–π–∫ —É–¥–∞–ª–µ–Ω! üíî",
                f"üìú –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏:",
                f"üÜî ID –ó–∞–ø–∏—Å–∏: {post_id}",
                f"üë§ –£–±—Ä–∞–ª –ª–∞–π–∫: {liker.first_name} {liker.last_name} (ID: {liker.id})"
            ]

            if post_author_id:
                post_author = await VKHelper.fetch_user_info(post_author_id)
                if post_author:
                    message_parts.append(
                        f"üñã –ê–≤—Ç–æ—Ä –∑–∞–ø–∏—Å–∏: {post_author.first_name} {post_author.last_name} "
                        f"(ID: {post_author.id})"
                    )
                else:
                    message_parts.append("üñã –ê–≤—Ç–æ—Ä –∑–∞–ø–∏—Å–∏: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å")
            else:
                message_parts.append("üñã –ê–≤—Ç–æ—Ä –∑–∞–ø–∏—Å–∏: –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")

            message_parts.append(f"üîó –°—Å—ã–ª–∫–∞: https://vk.com/wall{owner_id}_{post_id}")

            message = "\n".join(message_parts)
            await NotificationService.send_special_chat(
                message, 
                {
                    'type': "like_remove", 
                    'key': "like_removed",
                    'post_id': post_id,
                    'liker_id': liker_id
                }
            )

        except Exception as e:            
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ª–∞–π–∫–∞: {e}", exc_info=True)
bot.labeler.load(labeler)

def main() -> None:
    try:
        logger.info("ü§ñ –ë–æ—Ç VK –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        bot.run_forever()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()

